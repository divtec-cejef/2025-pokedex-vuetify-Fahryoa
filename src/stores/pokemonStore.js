/**
 * @file Gestionnaire de magasin pour les donn√©es des Pok√©mon.
 * Utilise Pinia pour g√©rer les types de Pok√©mon, la liste des Pok√©mon,
 * les op√©rations CRUD (Create, Read, Update, Delete) et les favoris.
 * Communique avec une API backend pour persister les donn√©es.
 * @version 2.0
 * @since 2024-09-22
 */

import { defineStore } from 'pinia'
import api from '@/plugins/axios'

/**
 * Client Axios partag√© configur√© dans `src/plugins/axios.js`.
 * Les en-t√™tes (dont Authorization) sont g√©r√©s globalement par
 * le store d'authentification (src/stores/authStore.js).
 */

/**
 * Magasin Pinia pour g√©rer toutes les donn√©es relatives aux Pok√©mon.
 * Ce magasin s'occupe uniquement de tout ce qui concerne les Pok√©mon :
 * - Charger la liste des Pok√©mon depuis l'API
 * - Ajouter, modifier, supprimer des Pok√©mon
 * - G√©rer les types de Pok√©mon
 * - G√©rer les favoris (stockage local)
 * - S√©lectionner un Pok√©mon pour affichage d√©taill√©
 */
export const usePokemonStore = defineStore('pokemon', {
  /**
   * √âtat initial du magasin Pok√©mon.
   * Ces donn√©es repr√©sentent toutes les informations sur les Pok√©mon g√©r√©es par l'app.
   */
  state: () => ({
    /**
     * Indique si une op√©ration de chargement est en cours.
     * Permet d'afficher des spinners ou d√©sactiver des boutons pendant les requ√™tes API.
     * @type {boolean}
     */
    isLoading: false,

    /**
     * Liste de tous les types de Pok√©mon disponibles.
     * Chaque type contient un id, un nom, et une couleur pour l'affichage.
     * Exemples : Feu, Eau, Plante, √âlectrique, etc.
     * @type {Array<{id: number, name: string, color: string}>}
     */
    types: [],

    /**
     * Liste de tous les Pok√©mon charg√©s depuis l'API.
     * Chaque Pok√©mon contient ses informations compl√®tes : nom, types, niveau, stats, etc.
     * @type {Array<Object>}
     */
    pokemons: [],

    /**
     * Le Pok√©mon actuellement s√©lectionn√© pour affichage d√©taill√©.
     * Utilis√© pour les pages de d√©tail d'un Pok√©mon sp√©cifique.
     * Vaut `null` si aucun Pok√©mon n'est s√©lectionn√©.
     * @type {Object|null}
     */
    selectedPokemon: null,

    /**
     * Liste des identifiants des Pok√©mon marqu√©s comme favoris par l'utilisateur.
     * Ces favoris sont stock√©s localement dans le navigateur (localStorage).
     * On ne stocke que les IDs pour √©conomiser l'espace et √©viter les doublons.
     * @type {Array<string>}
     */
    favorites: [],
  }),

  /**
   * Getters : propri√©t√©s calcul√©es bas√©es sur l'√©tat du magasin.
   * Ces fonctions permettent d'acc√©der facilement √† des donn√©es d√©riv√©es.
   */
  getters: {
    /**
     * Compte le nombre total de Pok√©mon charg√©s.
     * Utile pour afficher des statistiques ou des compteurs dans l'interface.
     * @param {Object} state - L'√©tat actuel du magasin
     * @returns {number} Le nombre total de Pok√©mon dans la liste
     */
    totalPokemons: state => {
      return state.pokemons.length
    },

    /**
     * Compte le nombre total de favoris.
     * Pratique pour afficher un badge avec le nombre de favoris dans l'interface.
     * @param {Object} state - L'√©tat actuel du magasin
     * @returns {number} Le nombre de Pok√©mon favoris
     */
    totalFavorites: state => {
      return state.favorites.length
    },

    /**
     * Trouve un type de Pok√©mon par son identifiant.
     * √âvite de r√©√©crire la logique de recherche dans chaque composant.
     * @param {Object} state - L'√©tat actuel du magasin
     * @returns {function(number): Object|undefined} Fonction qui prend un ID et retourne le type correspondant
     */
    getTypeById: state => {
      return typeId => {
        return state.types.find(type => type.id === typeId)
      }
    },

    /**
     * Trouve un Pok√©mon par son identifiant.
     * Tr√®s utile pour r√©cup√©rer les d√©tails d'un Pok√©mon sp√©cifique.
     * @param {Object} state - L'√©tat actuel du magasin
     * @returns {function(string): Object|undefined} Fonction qui prend un ID et retourne le Pok√©mon correspondant
     */
    getPokemonById: state => {
      return pokemonId => {
        return state.pokemons.find(pokemon => pokemon.id === pokemonId)
      }
    },

    /**
     * V√©rifie si un Pok√©mon donn√© est dans les favoris.
     * Permet d'afficher diff√©remment les Pok√©mon favoris dans l'interface (c≈ìur rouge, etc.).
     * @param {Object} state - L'√©tat actuel du magasin
     * @returns {function(Object): boolean} Fonction qui prend un Pok√©mon et retourne `true` s'il est favori
     */
    isFavorite: state => {
      return pokemon => {
        return state.favorites.includes(pokemon.id)
      }
    },

    /**
     * R√©cup√®re la liste compl√®te des objets Pok√©mon favoris.
     * Transforme la liste d'IDs de favoris en liste d'objets Pok√©mon complets.
     * Filtre automatiquement les favoris qui n'existent plus.
     * @param {Object} state - L'√©tat actuel du magasin
     * @returns {Array<Object>} Liste des Pok√©mon favoris (objets complets)
     */
    getFavorites: state => {
      // On parcourt la liste des IDs favoris
      const favoritePokemons = state.favorites.map(favoriteId => {
        // Pour chaque ID, on cherche le Pok√©mon correspondant
        return state.pokemons.find(pokemon => pokemon.id === favoriteId)
      })

      // On filtre pour √©liminer les undefined (favoris qui n'existent plus)
      return favoritePokemons.filter(pokemon => pokemon !== undefined)
    },
  },

  /**
   * Actions : m√©thodes qui peuvent modifier l'√©tat du magasin.
   * Toute la logique m√©tier concernant les Pok√©mon se trouve ici.
   */
  actions: {
    /**
     * Initialise le store Pok√©mon au d√©marrage de l'application.
     * Cette m√©thode doit √™tre appel√©e une seule fois dans main.js.
     *
     * √âTAPES DE CETTE M√âTHODE :
     * 1. Charger types et pok√©mons en parall√®le
     * 2. Restaurer les favoris depuis le localStorage
     * 3. Afficher un message de confirmation
     */
    async init () {
      console.log('üöÄ Initialisation du store Pok√©mon...')

      this.isLoading = true

      try {
        await Promise.all([
          this.fetchTypes({ withLoader: false }),
          this.fetchPokemons({ withLoader: false }),
        ])

        // Charger les favoris sauvegard√©s dans le navigateur
        this.loadFavorites()

        console.log('‚úÖ Store Pok√©mon initialis√©')
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation du store Pok√©mon:', error)
      } finally {
        this.isLoading = false
      }

      console.log('‚ÑπÔ∏è Les requ√™tes utilisent maintenant la configuration axios globale')
    },

    /**
     * Charge tous les types de Pok√©mon depuis l'API.
     * Les types sont utilis√©s pour cat√©goriser les Pok√©mon (Feu, Eau, Plante, etc.).
     *
     * √âTAPES DE CETTE M√âTHODE :
     * 1. Activer l'indicateur de chargement
     * 2. Faire la requ√™te GET vers l'API
     * 3. Stocker les types re√ßus dans le state
     * 4. G√©rer les erreurs √©ventuelles
     * 5. D√©sactiver l'indicateur de chargement
     *
     * @returns {Promise<void>}
     */
    async fetchTypes ({ withLoader = true } = {}) {
      console.log('üì• Chargement des types de Pok√©mon depuis l\'API...')

      // √âTAPE 1 : Activer l'indicateur de chargement
      if (withLoader) this.isLoading = true

      try {
        // √âTAPE 2 : Requ√™te GET vers l'API
        // Le token d'authentification est automatiquement ajout√© par la configuration d'Axios
        const response = await api.get('/types')

        // √âTAPE 3 : Traitement de la r√©ponse
        // L'API peut retourner les donn√©es dans diff√©rents formats, on s'adapte
        if (response.data && response.data.data) {
          // Format : { data: [...] }
          this.types = response.data.data
        } else if (response.data) {
          // Format direct : [...]
          this.types = response.data
        } else {
          // Format inattendu, on met un tableau vide
          this.types = []
        }

        console.log('‚úÖ Types de Pok√©mon charg√©s:', this.types.length, '√©l√©ments')
      } catch (error) {
        // √âTAPE 4 : Gestion des erreurs
        console.error('‚ùå Erreur lors du chargement des types:', error.message)

        // En cas d'erreur, on met un tableau vide pour √©viter les plantages
        this.types = []

        // Afficher une erreur plus d√©taill√©e si disponible
        if (error.response) {
          console.error('   D√©tail de l\'erreur serveur:', error.response.status, error.response.data)
        }
      } finally {
        // √âTAPE 5 : D√©sactiver l'indicateur de chargement dans tous les cas
        if (withLoader) this.isLoading = false
      }
    },

    /**
     * Charge tous les Pok√©mon depuis l'API.
     * R√©cup√®re la liste compl√®te des Pok√©mon avec leurs informations d√©taill√©es.
     *
     * √âTAPES DE CETTE M√âTHODE :
     * 1. Activer l'indicateur de chargement
     * 2. Faire la requ√™te GET vers l'API
     * 3. Stocker les Pok√©mon re√ßus dans le state
     * 4. Nettoyer les favoris obsol√®tes
     * 5. G√©rer les erreurs √©ventuelles
     * 6. D√©sactiver l'indicateur de chargement
     *
     * @returns {Promise<void>}
     */
    async fetchPokemons ({ withLoader = true } = {}) {
      console.log('üì• Chargement des Pok√©mon depuis l\'API...')

      // √âTAPE 1 : Activer l'indicateur de chargement
      if (withLoader) this.isLoading = true

      try {
        // √âTAPE 2 : Requ√™te GET vers l'API
        const response = await api.get('/pokemons')

        // √âTAPE 3 : Traitement de la r√©ponse
        if (response.data && response.data.data) {
          this.pokemons = response.data.data
        } else if (response.data) {
          this.pokemons = response.data
        } else {
          this.pokemons = []
        }

        console.log('‚úÖ Pok√©mon charg√©s:', this.pokemons.length, '√©l√©ments')

        // √âTAPE 4 : Nettoyer les favoris qui ne correspondent plus √† des Pok√©mon existants
        this.cleanupFavorites()
      } catch (error) {
        // √âTAPE 5 : Gestion des erreurs
        console.error('‚ùå Erreur lors du chargement des Pok√©mon:', error.message)

        this.pokemons = []

        if (error.response) {
          console.error('   D√©tail de l\'erreur serveur:', error.response.status, error.response.data)
        }
      } finally {
        // √âTAPE 6 : D√©sactiver l'indicateur de chargement dans tous les cas
        if (withLoader) this.isLoading = false
      }
    },

    /**
     * Ajoute un nouveau Pok√©mon via l'API.
     *
     * √âTAPES DE CETTE M√âTHODE :
     * 1. Valider les donn√©es du Pok√©mon
     * 2. Activer l'indicateur de chargement
     * 3. Envoyer la requ√™te POST √† l'API
     * 4. Ajouter le nouveau Pok√©mon √† la liste locale
     * 5. Retourner le r√©sultat de l'op√©ration
     * 6. G√©rer les erreurs √©ventuelles
     * 7. D√©sactiver l'indicateur de chargement
     *
     * @param {Object} pokemonData - Les donn√©es du Pok√©mon √† cr√©er
     * @param {string} pokemonData.name - Le nom du Pok√©mon
     * @param {number} pokemonData.level - Le niveau du Pok√©mon
     * @param {Array<number>} pokemonData.types - Les IDs des types du Pok√©mon
     * @returns {Promise<Object>} Objet avec `success` (boolean) et `message` (string)
     */
    async addPokemon (pokemonData) {
      console.log('‚ûï Tentative d\'ajout d\'un nouveau Pok√©mon:', pokemonData)

      // √âTAPE 1 : Validation basique des donn√©es
      if (!pokemonData.name || !pokemonData.level) {
        const errorMessage = 'Le nom et le niveau du Pok√©mon sont obligatoires'
        console.error('‚ùå', errorMessage)
        return {
          success: false,
          message: errorMessage,
        }
      }

      // √âTAPE 2 : Activer l'indicateur de chargement
      this.isLoading = true

      try {
        // √âTAPE 3 : Envoyer les donn√©es √† l'API
        const response = await api.post('/pokemons', pokemonData)

        // √âTAPE 4 : R√©cup√©rer le Pok√©mon cr√©√© depuis la r√©ponse
        let newPokemon = null
        if (response.data && response.data.data) {
          newPokemon = response.data.data
        } else if (response.data) {
          newPokemon = response.data
        }

        // √âTAPE 5 : Ajouter le nouveau Pok√©mon √† la liste locale
        if (newPokemon) {
          this.pokemons.push(newPokemon)
          console.log('‚úÖ Pok√©mon cr√©√© avec succ√®s:', newPokemon.name)
        }

        return {
          success: true,
          message: 'Pok√©mon ajout√© avec succ√®s !',
        }
      } catch (error) {
        // √âTAPE 6 : Gestion des erreurs
        console.error('‚ùå Erreur lors de l\'ajout du Pok√©mon:', error.message)

        let errorMessage = 'Erreur lors de l\'ajout du Pok√©mon'

        if (error.response) {
          // Essayer de r√©cup√©rer un message d'erreur pr√©cis depuis l'API
          if (error.response.data && error.response.data.message) {
            errorMessage = error.response.data.message
          } else if (error.response.data && error.response.data.errors && error.response.data.errors.length > 0) {
            errorMessage = error.response.data.errors[0].message
          }
        }

        return {
          success: false,
          message: errorMessage,
        }
      } finally {
        // √âTAPE 7 : D√©sactiver l'indicateur de chargement dans tous les cas
        this.isLoading = false
      }
    },

    /**
     * Met √† jour un Pok√©mon existant via l'API.
     *
     * @param {string} pokemonId - L'identifiant du Pok√©mon √† modifier
     * @param {Object} updatedData - Les nouvelles donn√©es du Pok√©mon
     * @returns {Promise<Object>} Objet avec `success` (boolean) et `message` (string)
     */
    async updatePokemon (pokemonId, updatedData) {
      console.log('‚úèÔ∏è Modification du Pok√©mon', pokemonId, 'avec:', updatedData)

      this.isLoading = true

      try {
        // Envoyer les modifications √† l'API
        const response = await api.put(`/pokemons/${pokemonId}`, updatedData)

        // R√©cup√©rer les donn√©es mises √† jour
        let updatedPokemon = null
        if (response.data && response.data.data) {
          updatedPokemon = response.data.data
        } else if (response.data) {
          updatedPokemon = response.data
        }

        // Mettre √† jour le Pok√©mon dans la liste locale
        if (updatedPokemon) {
          const pokemonIndex = this.pokemons.findIndex(pokemon => pokemon.id === pokemonId)
          if (pokemonIndex !== -1) {
            // Fusionner les anciennes donn√©es avec les nouvelles
            this.pokemons[pokemonIndex] = { ...this.pokemons[pokemonIndex], ...updatedPokemon }
            console.log('‚úÖ Pok√©mon modifi√© avec succ√®s')
          }
        }

        return {
          success: true,
          message: 'Pok√©mon modifi√© avec succ√®s !',
        }
      } catch (error) {
        console.error('‚ùå Erreur lors de la modification du Pok√©mon:', error.message)

        let errorMessage = 'Erreur lors de la modification du Pok√©mon'
        if (error.response && error.response.data && error.response.data.message) {
          errorMessage = error.response.data.message
        }

        return {
          success: false,
          message: errorMessage,
        }
      } finally {
        this.isLoading = false
      }
    },

    /**
     * Supprime un Pok√©mon via l'API.
     * Supprime √©galement le Pok√©mon des favoris s'il y √©tait.
     *
     * @param {string} pokemonId - L'identifiant du Pok√©mon √† supprimer
     * @returns {Promise<Object>} Objet avec `success` (boolean) et `message` (string)
     */
    async deletePokemon (pokemonId) {
      console.log('üóëÔ∏è Suppression du Pok√©mon', pokemonId)

      this.isLoading = true

      try {
        // Supprimer le Pok√©mon via l'API
        await api.delete(`/pokemons/${pokemonId}`)

        // Supprimer le Pok√©mon de la liste locale
        this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== pokemonId)

        // Supprimer le Pok√©mon des favoris s'il y √©tait
        this.favorites = this.favorites.filter(favoriteId => favoriteId !== pokemonId)
        this.saveFavorites()

        console.log('‚úÖ Pok√©mon supprim√© avec succ√®s')

        return {
          success: true,
          message: 'Pok√©mon supprim√© avec succ√®s !',
        }
      } catch (error) {
        console.error('‚ùå Erreur lors de la suppression du Pok√©mon:', error.message)

        return {
          success: false,
          message: 'Erreur lors de la suppression du Pok√©mon',
        }
      } finally {
        this.isLoading = false
      }
    },

    /**
     * S√©lectionne un Pok√©mon pour l'affichage d√©taill√©.
     * Utile pour les pages de d√©tail d'un Pok√©mon.
     *
     * @param {string} pokemonId - L'identifiant du Pok√©mon √† s√©lectionner
     */
    selectPokemon (pokemonId) {
      // Chercher le Pok√©mon dans la liste
      const pokemon = this.pokemons.find(p => p.id === pokemonId)

      if (pokemon) {
        this.selectedPokemon = pokemon
        console.log('üëÜ Pok√©mon s√©lectionn√©:', pokemon.name)
      } else {
        this.selectedPokemon = null
        console.log('üëÜ Pok√©mon non trouv√© pour l\'ID:', pokemonId)
      }
    },

    /**
     * Charge les favoris depuis le stockage local du navigateur (localStorage).
     * Cette m√©thode est appel√©e au d√©marrage pour restaurer les favoris pr√©c√©dents.
     */
    loadFavorites () {
      try {
        // R√©cup√©rer les favoris depuis localStorage
        const savedFavorites = localStorage.getItem('pokemon_favorites')

        if (savedFavorites) {
          // Parser le JSON et stocker dans le state
          this.favorites = JSON.parse(savedFavorites)
          console.log('üíæ Favoris charg√©s depuis le navigateur:', this.favorites.length, '√©l√©ments')
        } else {
          // Pas de favoris sauvegard√©s, initialiser un tableau vide
          this.favorites = []
          console.log('üíæ Aucun favori sauvegard√© trouv√©')
        }
      } catch (error) {
        // En cas d'erreur (donn√©es corrompues), r√©initialiser
        console.error('‚ùå Erreur lors du chargement des favoris:', error)
        this.favorites = []
      }
    },

    /**
     * Sauvegarde les favoris dans le stockage local du navigateur.
     * Appel√©e automatiquement chaque fois que la liste des favoris change.
     */
    saveFavorites () {
      try {
        // Convertir la liste en JSON et sauvegarder
        localStorage.setItem('pokemon_favorites', JSON.stringify(this.favorites))
        console.log('üíæ Favoris sauvegard√©s dans le navigateur')
      } catch (error) {
        console.error('‚ùå Erreur lors de la sauvegarde des favoris:', error)
      }
    },

    /**
     * Nettoie les favoris en supprimant les IDs qui ne correspondent plus √† des Pok√©mon existants.
     * Appel√©e automatiquement apr√®s le chargement des Pok√©mon.
     */
    cleanupFavorites () {
      const initialCount = this.favorites.length

      // Filtrer pour ne garder que les IDs qui correspondent √† des Pok√©mon existants
      this.favorites = this.favorites.filter(favoriteId => {
        return this.pokemons.some(pokemon => pokemon.id === favoriteId)
      })

      const removedCount = initialCount - this.favorites.length

      if (removedCount > 0) {
        console.log('üßπ Nettoyage des favoris:', removedCount, 'favoris obsol√®tes supprim√©s')
        this.saveFavorites()
      }
    },

    /**
     * Ajoute ou retire un Pok√©mon des favoris.
     * Si le Pok√©mon est d√©j√† favori, on le retire. Sinon, on l'ajoute.
     *
     * @param {Object} pokemon - Le Pok√©mon √† ajouter ou retirer des favoris
     */
    toggleFavorite (pokemon) {
      // Chercher si ce Pok√©mon est d√©j√† dans les favoris
      const favoriteIndex = this.favorites.findIndex(favoriteId => favoriteId === pokemon.id)

      if (favoriteIndex === -1) {
        // Le Pok√©mon n'est pas favori, on l'ajoute
        this.favorites.push(pokemon.id)
        console.log('‚ù§Ô∏è Pok√©mon ajout√© aux favoris:', pokemon.name)
      } else {
        // Le Pok√©mon est d√©j√† favori, on le retire
        this.favorites.splice(favoriteIndex, 1)
        console.log('üíî Pok√©mon retir√© des favoris:', pokemon.name)
      }

      // Sauvegarder les changements dans le navigateur
      this.saveFavorites()
    },

    /**
     * M√©thode utilitaire pour d√©boguer l'√©tat du store Pok√©mon.
     * Affiche toutes les informations importantes dans la console du navigateur.
     *
     * Usage : pokemonStore.debugPokemon() dans la console ou dans le code
     */
    debugPokemon () {
      console.log('üêõ ===== DEBUG STORE POK√âMON =====')
      console.log('üìä Pok√©mon charg√©s:', this.pokemons.length)
      console.log('üè∑Ô∏è Types charg√©s:', this.types.length)
      console.log('‚ù§Ô∏è Favoris:', this.favorites.length)
      console.log('üëÜ Pok√©mon s√©lectionn√©:', this.selectedPokemon?.name || 'aucun')
      console.log('‚è≥ Chargement en cours:', this.isLoading)
      if (this.pokemons.length > 0) {
        console.log('üîç Premier Pok√©mon (exemple):', this.pokemons[0])
      }

      if (this.favorites.length > 0) {
        console.log('üîç IDs favoris:', this.favorites)
      }

      console.log('üêõ ==============================')
    },
  },
})
